#include "texture.h"

GLuint LoadTexture(std::string texName)
{
	SDL_Surface* surface=NULL;
    surface=IMG_Load(texName.c_str());
	if(surface == NULL) {
		std::cerr << "SDL_IMG could not load texture " << texName << std::endl;
		return NULL;
	}
	return SurfaceToTexture(surface, texName);
}

GLuint SurfaceToTexture(SDL_Surface *surface, std::string texName)
{
	GLuint texture = NULL;
    GLenum texFormat;
    GLint numColors;

	if(surface != NULL) {
		// ensure image w and h are powers of 2
		if(((surface->w & (surface->w - 1)) != 0) && ((surface->h & (surface->h -1)) != 0)) {
			if(texName.empty()) 
				std::cerr << "warning: unnamed surface's (likely produced by SDL_ttf) dimensions are not power of 2" << std::endl;
			else 
				std::cerr << "warning: " << texName << "\'s dimensions are not a power of 2" << std::endl;
		}

		numColors=surface->format->BytesPerPixel;
		if(numColors == 4) {
			if(surface->format->Rmask == 0x000000ff)
				texFormat=GL_RGBA;
			else
				texFormat=GL_BGRA;
		}
		else if(numColors == 3) {
			if(surface->format->Rmask == 0x000000ff)
				texFormat=GL_RGB;
			else
				texFormat=GL_BGR;
		}
		else {
			if(texName.empty())
				std::cerr << "warning: unnamed surface (likely produced by SDL_ttf) is not a truecolor image" << std::endl;
			else
				std::cerr << "warning: " << texName << " is not a truecolor image" << std::endl << IMG_GetError() << std::endl;
		}
		glGenTextures(1, &texture);
		glBindTexture(GL_TEXTURE_2D, texture);
        
		// texture stretching properties
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

		// edit image data with properties provided by the SDL surface
		glTexImage2D(GL_TEXTURE_2D, 0, numColors, surface->w, surface->h, 0, 
			texFormat, GL_UNSIGNED_BYTE, surface->pixels);
	}
    else {
		if(texName.empty()) 
			std::cerr << "unnamed SDL surface (likely generated by SDL_ttf) is referenced by a NULL pointer" << std::endl;
		else 
			std::cerr << "texture " << texName.c_str() << " is referenced by a NULL pointer " << std::endl;
	}
    if(surface) {
        SDL_FreeSurface(surface);
    }
    return texture;
}
